import re, wave, cStringIO, math, struct
import Task, TaskGen
from TaskGen import extension, declare_extension

def gen_tone(task):
    tone_freq = int(task.generator.tone)
    sample_freq = int(task.generator.rate)
    sample_count = int(task.generator.frames)
    channels = int(task.generator.channels)

    f = wave.open(task.outputs[0].abspath(task.env), "wb")
    f.setnchannels(channels)
    f.setsampwidth(2)
    f.setframerate(sample_freq)
    buf = cStringIO.StringIO()

    frames = []
    for i in range(sample_count):
        a = 0.8 * 32768 * math.sin((i * 2.0 * math.pi * tone_freq) / sample_freq)
        if channels == 1:
            buf.write(struct.pack('h', int(a)))
        else:
            buf.write(struct.pack('hh', int(a), int(a)))
    f.writeframes(buf.getvalue())
    f.close()

    return 0

def build(bld):

    wavs = ["booster_on_sfx.wav",
            "door_opening.wav",
            "drumloop.wav",
            "onefootstep.wav",
            "osc2_sin_440hz.wav"]

    for rate in [22050, 32000, 44000, 44100]:
        for tone in [440, 2000]:
            for channels in [1, 2]:
                frames = 2 * rate
                name = '%s_tone_%d_%d_%d.wav' % (["mono", "stereo"][channels-1], tone, rate, frames)
                wavs.append(name)
                bld.new_task_gen(target = name,
                                 tone = tone,
                                 rate = rate,
                                 frames = frames,
                                 channels = channels,
                                 rule = gen_tone,)

    bld.add_group()

    embedded_wavs = bld.new_task_gen(features = 'cxx cstaticlib embed test',
                                     target = 'embedded_wavs',
                                     source = 'dummy.cpp',  # Make waf happy
                                     embed_source = wavs)

    embedded_oggs = bld.new_task_gen(features = 'cxx cstaticlib embed test',
                                     target = 'embedded_oggs',
                                     source = 'dummy.cpp',  # Make waf happy
                                     embed_source = bld.path.ant_glob('**/*.ogg'))

    test_sound = bld.new_task_gen(features = 'cxx cprogram embed test',
                                  includes = '../../../src .',
                                  uselib = 'GTEST DLIB PLATFORM_SOCKET OPENAL',
                                  uselib_local = 'sound2 embedded_wavs embedded_oggs',
                                  exported_symbols = ["DefaultSoundDevice"],
                                  target = 'test_sound',
                                  source = 'test_sound.cpp')

    test_sound.install_path = None

    test_sound_null = bld.new_task_gen(features = 'cxx cprogram embed test',
                                  includes = '../../../src .',
                                  uselib = 'GTEST DLIB PLATFORM_SOCKET OPENAL',
                                  uselib_local = 'sound_null embedded_wavs embedded_oggs',
                                  target = 'test_sound_null',
                                  source = 'test_sound.cpp')


    test_sound_null.install_path = None

    test_sound2 = bld.new_task_gen(features = 'cxx cprogram embed test',
                                  includes = '../../../src .',
                                  uselib = 'GTEST DLIB PLATFORM_SOCKET OPENAL',
                                  uselib_local = 'sound2 embedded_wavs embedded_oggs',
                                  exported_symbols = ["DefaultSoundDevice"],
                                  target = 'test_sound2',
                                  source = 'test_sound2.cpp')

    test_sound2.install_path = None
